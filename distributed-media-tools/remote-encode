#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    "dynssh"
  _check_cmd \
    "medialength"
  _check_cmd \
    "mediasplit"
  _check_cmd \
    "rsync"
}

# shellcheck disable=SC2034
_global_variables() {
  out_file=""
  in_file=""
  target_encoders=()
  chunk_length=""
  parallel_uploads=""
  color=""
  quiet=""
}

_send_chunk() {
  local \
    _in="${1}" \
    _encoder="${2}" \
    _chunk="${3}"
  available=(
    "${_available[@]/$_encoder}"
  )
  dynssh 
  available+=(
    "${_encoder}"
  )
}

_send() {
  local \
    _in="${1}" \
    _chunk_length="${2}" \
    _encoders=() \
    _available=() \
    _pid \
    _pids=() \
    _chunk=1 \
    _chunks \
    _length
  shift \
    2
  _encoders=(
    "$@"
    )
  _available=(
    "${_encoders[@]}"
  )
  _length="$( \
    medialength \
      "${_in}")"
  _chunks="$( \
    echo \
      "${_length} / ${_chunk_length} + 1" | \
      bc)"
  while \
    (( "${_chunk}" <= "${_chunks}" )) && \
    (( "${#_pids}" <= "${_uploads}" )); do
    _run \
      "send_chunk_${_chunk}" \
      "0" \
      "async" \
      "" \
      "_send_chunk" \
        "${_in}" \
        "${_chunk}" \
        "${_available[0]}" || \
      true
      _pids+=(
        "$(_get_pid \
	    "send_chunk_${_chunk}")"
      )
    _chunk="$(( \
      _chunk + 1 ))"
    if [[ "${#_pids}" == "${_uploads}" ]]; then 
      wait \
	-f \
	-p \
	  _pid
        -n \
        "${_pids[@]}"
      _pids=(
        "${_pids[@]/$_pid}"
      )
      _pid=""
    fi
  done
}

# Remote encade files
# $1: input file
# $2: output file
# $3: parallel uploads
# $@: target devices
_remote_encode() {
  local \
    _in="${1}" \
    _out=(
      "${2}"
    ) \
    _uploads="${3}" \
    _chunk_length="${4}" \
    _vids=() \
    _send_opts=() \
    _ext
  shift \
    4
  _encoders=(
    "$@"
  )
  _dynssh_opts+=(
    -C
      rsync
  )
  _rsync_opts+=(
    -avz
  )
  _run \
    "send_${_i}" \
    "0" \
    "sync" \
    "_send" \
      "${_in}" \
      "${_chunk_length}" \
      "${_uploads}" \
      "${_encoders[@]}" || \
    true
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "audio" \
    "mode" \
    "replace"
  _set_override \
    "video" \
    "encode" \
    "n"
  _set_override \
    "out" \
    "stdout" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Cut media files

Usage:
  $(_get "app" "name")
    [options]
    <output_video>
    <input_audio>
    [input_video]
  options:
     -m                   Audio mode (replace, overlap)
                          Default: $(_get "audio" "mode")
     -e                   Whether to encode the resulting video
                          or use encoder from input media.
			  Default: $(_get "video" "encode")
     -s                   Output to stdout.
			  Default: $(_get "out" "stdout")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:scevh?' \
    arg; do
  case \
    "${arg}" in
    m) override_audio_mode="${OPTARG}" ;;
    s) override_out_stdout="y" ;;
    c) override_color="y" ;;
    e) override_video_encode="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))

(( $# < 3 )) && \
  _set_overrides && \
  _usage \
    1
_set \
  "out" \
  "video" \
  "${1}"
_set \
  "in" \
  "audio" \
  "${2}"
shift \
  2
in_videos=(
  "$@"
)
_set_overrides
_config_user_init \
  "media-tools"
_ffmpeg_options_load
_audiovid2vid \
  "$(_get \
       "audio" \
       "mode")" \
  "$(_get \
       "out" \
       "video")" \
  "$(_get \
       "in" \
       "audio")" \
  "${in_videos[@]}"
