#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    "dynssh"
  _check_cmd \
    "hotnamectl"
  _check_cmd \
    "medialength"
  _check_cmd \
    "mediasplit"
  _check_cmd \
    "rsync"
}

# shellcheck disable=SC2034
_global_variables() {
  app_opts=()
  encoding_date=""
  out_file=""
  in_file=""
  target_encoders=()
  chunk_length=""
  parallel_uploads=""
  color=""
  quiet=""
}

_send_chunk() {
  local \
    _in="${1}" \
    _encoder="${2}" \
    _chunk="${3}"
  available=(
    "${_available[@]/$_encoder}"
  )
  dynssh 
  available+=(
    "${_encoder}"
  )
}

_get_chunks() {
  local \
    _in="${1}" \
    _chunk_length="${2}" \
    _length
  _length="$( \
    medialength \
      "${_in}")"
  echo \
    "${_length} / ${_chunk_length} + 1" | \
    bc
}

_send() {
  local \
    _in="${1}" \
    _chunks="${2}" \
    _uploads="${3}" \
    _encoders=() \
    _pendings=() \
    _available=() \
    _job \
    _chunk=1 \
    _finished
  shift \
    3
  _encoders=(
    "$@"
  )
  _available=(
    "${_encoders[@]}"
  )
  while \
    [ "${_chunk}" -le "${_chunks}" ] && \
    [ "${#_pendings}" -le "${_uploads}" ]; do
    _run \
      "send_chunk_${_chunk}" \
      "0" \
      "async" \
      "" \
      "_send_chunk" \
        "${_in}" \
        "${_chunk}" \
        "${_available[0]}" || \
      true
    _pendings+=(
      "$(_get_pid \
	   "send_chunk_${_chunk}")"
    )
    _chunk="$(( \
      _chunk + 1 ))"
    if [[ "${#_pendings}" == "${_uploads}" ]]; then 
      wait \
	-f \
	-p \
	  _job
        -n \
        "${_pendings[@]}"
      _pendings=(
        "${_pendings[@]/$_job}"
      )
      _job=""
    fi
  done
}

# Remote encade files
# $1: input file
# $2: output file
# $3: parallel uploads
# $@: target devices
_remote_encode() {
  local \
    _in="${1}" \
    _out=(
      "${2}"
    ) \
    _uploads="${3}" \
    _chunk_length="${4}" \
    _vids=() \
    _send_opts=() \
    _ext \
    _chunks
  shift \
    4
  _encoders=(
    "$@"
  )
  _dynssh_opts+=(
    -C
      rsync
  )
  _rsync_opts+=(
    -avz
  )
  _chunks="$( \
    _get_chunks \
      "${_in}" \
      "${_chunk_length}")"
  "_send" \
    "${_in}" \
    "${_chunks}" \
    "${_uploads}" \
    "${_encoders[@]}"
  # _run \
  #   "send" \
  #   "0" \
  #   "sync" \
  #   "_send" \
  #     "${_in}" \
  #     "${_chunks}" \
  #     "${_uploads}" \
  #     "${_encoders[@]}" || \
  #   true
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
  _set_override \
    "encoding" \
    "date" \
    "$(_get_date_human)"
  if [[ "${target_encoders[*]}" == "" ]]; then
    target_encoders+=(
      "$(hotnamectl)"
    )
  fi
  _set_override \
    "parallel" \
    "uploads" \
    "2"
  _set_override \
    "chunk" \
    "length" \
    "$((60 * 10))"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "              Encode date:   $(_get "encoding" "date")"
  _msg_info "               Input file:   $(_get "in" "file")"
  _msg_info "              Output file:   $(_get "out" "file")"
  _msg_info "         Parallel uploads:   $(_get "parallel" "uploads")"
  _msg_info "             Chunk length:   $(_get "chunk" "length")"
  _msg_info "          Target encoders:   ${target_encoders[*]}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Remote encode media files

Usage:
  $(_get "app" "name")
    [options]
    <input_video>
    <output_video>
  options:
     -t <encoder>            Add an encoder.
			     Default: ${target_encoders[*]}
     -p <parallel_uploads>   How many parallel uploads to the encoders.
			     Default: $(_get "parallel" "uploads")
     -l <chunk_length>       Length of a remote chunk to encode.
			     Default: $(_get "chunk" "length")
     -h                      This message.
     -v                      Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    't:p:l:scevh?' \
    arg; do
  case \
    "${arg}" in
    t) target_encoders+=(
         "${OPTARG}"
       );;
    p) override_parallel_uploads="${OPTARG}" ;;
    l) override_chunk_length="${OPTARG}" ;;
    c) override_color="y" ;;
    e) override_video_encode="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 2 )) && \
  _set_overrides && \
  _usage \
    1
_set \
  "in" \
  "file" \
  "${1}"
_set \
  "out" \
  "file" \
  "${2}"
_set_overrides
_config_user_init \
  "distributed-media-tools"
app_opts=(
  "$(_get \
       "in" \
       "file")"
  "$(_get \
       "parallel" \
       "uploads")"
  "$(_get \
       "chunk" \
       "length")"
  "${target_encoders[@]}"
)
_show_config
_remote_encode \
  "${app_opts[@]}"
